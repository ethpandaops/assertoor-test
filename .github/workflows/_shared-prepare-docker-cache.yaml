
on:
  workflow_call:
    inputs:
      kurtosis_version:
        type: string
        description: "The kurtosis version to use."
        default: ""

jobs:
  run_prepare:
    name: "Prepare Docker cache (${{ inputs.kurtosis_version }})"
    runs-on: ubuntu-latest
    steps:
    - name: Check if cache key exists
      id: check_cache
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        KEY="kurtosis-docker-${{ runner.os }}-${{ inputs.kurtosis_version }}"
        CACHE_HIT=$(gh cache list --repo ${{ github.repository }} --json "key" --key "$KEY" | jq -c ".[]" | wc -l)
        if [ $CACHE_HIT -gt 0 ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Cache Docker images.
      id: cache
      if: ${{ steps.check_cache.outputs.exists == 'false' }}
      uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # 4.2.4
      with:
        path: ./docker-cache
        key: kurtosis-docker-${{ runner.os }}-${{ inputs.kurtosis_version }}
    
    - name: "Generate dummy kurtosis config"
      if: ${{ steps.check_cache.outputs.exists == 'false' }}
      shell: bash
      run: |
        mkdir -p ./temp
        echo "{\"participants\": []}" > ./temp/test-network.yaml

    - name: Run kurtosis testnet for cache warmup
      if: ${{ steps.check_cache.outputs.exists == 'false' }}
      continue-on-error: true
      id: testnet
      uses: ethpandaops/kurtosis-assertoor-github-action@5932604b244dbd2ddb811516b516a9094f4d2c2f # v1
      with:
        kurtosis_extra_args: "--image-download always --non-blocking-tasks --verbosity DETAILED"
        kurtosis_backend: docker
        kurtosis_version: ${{ inputs.kurtosis_version }}
        ethereum_package_url: github.com/pk910/kurtosis-dummy-pkg
        ethereum_package_branch: main
        ethereum_package_args: "./temp/test-network.yaml"
        enclave_name: "assertoor-warmup"
        await_assertoor_tests: "false"
        enclave_dump: "false"

    - name: "Cache docker images"
      if: ${{ steps.check_cache.outputs.exists == 'false' }}
      run: |
        if [ ! -d ./docker-cache ]; then
          mkdir -p ./docker-cache
        fi
        
        docker_images=$(docker image list --format '{{ if ne .Repository "<none>" }}{{ .Repository }}{{ if ne .Tag "<none>" }}:{{ .Tag }}{{ end }}{{ else }}{{ .ID }}{{ end }}' | tr '\n' ' ')
        docker save --output ./docker-cache/docker-images.tar $docker_images
